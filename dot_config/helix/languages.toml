[[language]]
name = "ruby"
scope = "source.ruby"
injection-regex = "ruby"
file-types = [
  "rb",
  "rake",
  "rakefile",
  "irb",
  "gemfile",
  "gemspec",
  "Rakefile",
  "Gemfile",
  "rabl",
  "jbuilder",
  "feature",
  "jb",
  "Podfile",
  "podspec",
  "Vagrantfile",
  "Brewfile",
  "rjs",
  "rbi",
  "Guardfile",
  "Capfile",
  "Cheffile",
  "Hobofile",
  "Appraisals",
  "Rantfile",
  "Berksfile",
  "Berksfile.lock",
  "Thorfile",
  "Puppetfile",
  "Fastfile",
  "Appfile",
  "Deliverfile",
  "Matchfile",
  "Scanfile",
  "Snapfile",
  "Gymfile"
]
shebangs = ["ruby"]
comment-token = "#"
language-servers = ["solargraph", "scls", "rust-analyzer"]
indent = { tab-width = 2, unit = "  " }

[[grammar]]
name = "ruby"
source = { git = "https://github.com/tree-sitter/tree-sitter-ruby", rev = "206c7077164372c596ffa8eaadb9435c28941364" }


[language-server.scls]
command = "simple-completion-language-server"

[language-server.scls.config]
max_completion_items = 20     # set max completion results len for each group: words, snippets, unicode-input
snippets_first = true         # completions will return before snippets by default
feature_words = true          # enable completion by word
feature_snippets = true       # enable snippets
feature_unicode_input = true  # enable "unicode input"


# write logs to /tmp/completion.log
[language-server.scls.environment]
RUST_LOG = "info,simple-completion-langauge-server=info"
LOG_FILE = "/tmp/completion.log"

# append langage server to existed languages
[[language]]
name = "rust"
language-servers = [ "scls", "rust-analyzer" ]

[[language]]
name = "git-commit"
language-servers = [ "scls" ]

[[language]]
name = "python"
roots = ["pyproject.toml", "poetry.lock", ".git", ".venv/"]
language-servers = ["basedpyright", "ruff"]
file-types = ["py", "ipynb"]
comment-token = "#"
shebangs = ["python"]
auto-format = true

[language-server.basedpyright]
command = "basedpyright-langserver"
args = ["--stdio"]
except-features = ["format", "code-action"]

[language-server.basedpyright.config.basedpyright.analysis]
autoSearchPaths = true
typeCheckingMode = "basic"
diagnosticMode = "openFilesOnly"

[language-server.ruff]
command = "ruff"
args = ["server", "--preview"]

[language-server.emmet-ls]
args = ["--stdio"]
command="emmet-ls"

[[language]]
name = "html"
language-servers = ["vscode-html-language-server", "emmet-ls"]
formatter = { command = 'prettier', args = ["--parser", "html"] }
auto-format = true

[[language]]
name = "javascript"
formatter = { command = 'deno', args = ["fmt", "-", "--ext", "js" ] }
auto-format = true

[[language]]
name = "json"
formatter = { command = 'deno', args = ["fmt", "-", "--ext", "json" ] }

[[language]]
name = "markdown"
formatter = { command = 'deno', args = ["fmt", "-", "--ext", "md" ] }
auto-format = true

[[language]]
name = "typescript"
formatter = { command = 'deno', args = ["fmt", "-", "--ext", "ts" ] }
auto-format = true

[[language]]
name = "jsx"
formatter = { command = 'deno', args = ["fmt", "-", "--ext", "jsx" ] }
auto-format = true

[[language]]
name = "tsx"
formatter = { command = 'deno', args = ["fmt", "-", "--ext", "tsx" ] }
auto-format = true

[[language]]
name = "go"
language-servers = [ "scls", "gopls" ]
